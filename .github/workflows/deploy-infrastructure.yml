name: Deploy Infrastructure

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - test
          - staging
          - prod
      destroy:
        description: 'Destroy infrastructure'
        required: false
        type: boolean
        default: false

env:
  BICEP_VERSION: 'v0.24.24'
  AZURE_CLI_VERSION: '2.55.0'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  # Determine environment based on branch
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  # Validate Bicep templates
  validate:
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/setup-azd@v1
        with:
          version: ${{ env.AZURE_CLI_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Install Bicep
        run: |
          az bicep install
          az bicep version

      - name: Lint Bicep templates
        run: |
          az bicep build --file infrastructure/bicep/main.bicep

      - name: Validate deployment
        run: |
          az deployment sub validate \
            --location australiaeast \
            --template-file infrastructure/bicep/main.bicep \
            --parameters infrastructure/bicep/parameters/${{ needs.determine-environment.outputs.environment }}.parameters.json

      - name: PSRule validation
        uses: microsoft/ps-rule@v2.9.0
        with:
          modules: 'PSRule.Rules.Azure'
          inputPath: 'infrastructure/bicep/'
          outputFormat: Sarif
          outcome: Fail
        continue-on-error: true

      - name: Upload validation results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
        continue-on-error: true

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/bicep/
          framework: bicep
          output_format: sarif
          output_file_path: checkov.sarif
          soft_fail: true
          skip_check: CKV_AZURE_35,CKV_AZURE_113

      - name: Upload Checkov results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif
        continue-on-error: true

      - name: Security summary
        if: always()
        run: |
          echo "### Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Checkov: ${{ steps.checkov.outcome }}" >> $GITHUB_STEP_SUMMARY

  # Cost estimation
  cost-estimation:
    runs-on: ubuntu-latest
    needs: [determine-environment, validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/setup-infracost@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
        continue-on-error: true

      - name: Generate cost estimate
        run: |
          # Convert Bicep to ARM for Infracost
          az bicep build --file infrastructure/bicep/main.bicep --outfile main.json

          # Only run if Infracost is available
          if command -v infracost &> /dev/null; then
            infracost breakdown \
              --path main.json \
              --format json \
              --out-file /tmp/infracost.json
          else
            echo "Infracost not configured, skipping cost estimation"
          fi
        continue-on-error: true

      - name: Post cost estimate to PR
        if: github.event_name == 'pull_request' && success()
        uses: infracost/actions/comment@v1
        with:
          path: /tmp/infracost.json
          behavior: update
        continue-on-error: true

  # What-If analysis
  what-if:
    runs-on: ubuntu-latest
    needs: [determine-environment, security-scan]
    environment: ${{ needs.determine-environment.outputs.environment }}
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run What-If
        id: whatif
        run: |
          WHAT_IF_OUTPUT=$(az deployment group what-if \
            --resource-group rg-numbatwallet-${{ needs.determine-environment.outputs.environment }} \
            --template-file infrastructure/bicep/main.bicep \
            --parameters infrastructure/bicep/parameters/${{ needs.determine-environment.outputs.environment }}.parameters.json \
            --output json 2>/dev/null || echo "{}")

          echo "whatif_output<<EOF" >> $GITHUB_OUTPUT
          echo "$WHAT_IF_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Comment What-If results
        if: success() && steps.whatif.outputs.whatif_output != '{}'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `${{ steps.whatif.outputs.whatif_output }}`;
            const body = `### What-If Analysis Results

            <details>
            <summary>Click to expand</summary>

            \`\`\`json
            ${output}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Deploy infrastructure
  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, security-scan, cost-estimation]
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.app_url }}
    if: github.event_name != 'pull_request' && github.event.inputs.destroy != 'true'
    outputs:
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      app_url: ${{ steps.deploy.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create resource group
        run: |
          az group create \
            --name rg-numbatwallet-${{ needs.determine-environment.outputs.environment }} \
            --location australiaeast \
            --tags Environment=${{ needs.determine-environment.outputs.environment }} Project=NumbatWallet

      - name: Deploy infrastructure
        id: deploy
        run: |
          DEPLOYMENT_NAME="numbatwallet-$(date +%Y%m%d%H%M%S)"
          echo "deployment_id=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT

          DEPLOYMENT_OUTPUT=$(az deployment group create \
            --name "$DEPLOYMENT_NAME" \
            --resource-group rg-numbatwallet-${{ needs.determine-environment.outputs.environment }} \
            --template-file infrastructure/bicep/main.bicep \
            --parameters infrastructure/bicep/parameters/${{ needs.determine-environment.outputs.environment }}.parameters.json \
            --output json)

          APP_URL=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.properties.outputs.webAppUrl.value // "https://numbatwallet.azurewebsites.net"')
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT

          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment ID: $DEPLOYMENT_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- App URL: $APP_URL" >> $GITHUB_STEP_SUMMARY

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.determine-environment.outputs.environment }}',
              description: 'Infrastructure deployment',
              auto_merge: false,
              required_contexts: [],
              production_environment: '${{ needs.determine-environment.outputs.environment }}' === 'prod'
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.app_url }}',
              description: 'Deployment completed successfully'
            });

  # Smoke tests
  smoke-test:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Health check - Web App
        run: |
          max_attempts=10
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            if curl -f ${{ needs.deploy.outputs.app_url }}/health; then
              echo "Health check passed"
              break
            fi

            echo "Attempt $((attempt + 1)) failed, waiting..."
            sleep 30
            attempt=$((attempt + 1))
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            exit 1
          fi
        continue-on-error: true

      - name: Run API tests
        run: |
          # Run basic API tests if available
          if [ -f "tests/postman/smoke-tests.json" ]; then
            npm install -g newman
            newman run tests/postman/smoke-tests.json \
              --environment tests/postman/env-${{ needs.determine-environment.outputs.environment }}.json \
              --reporters cli,json \
              --reporter-json-export results.json
          else
            echo "No smoke tests found, skipping"
          fi
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: results.json
        continue-on-error: true

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy, smoke-test]
    if: failure() && github.event_name != 'pull_request'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get previous deployment
        id: previous
        run: |
          PREVIOUS=$(az deployment group list \
            --resource-group rg-numbatwallet-${{ needs.determine-environment.outputs.environment }} \
            --query "[?name!='${{ needs.deploy.outputs.deployment_id }}'] | [0].name" \
            --output tsv)

          echo "previous_deployment=$PREVIOUS" >> $GITHUB_OUTPUT

      - name: Rollback to previous deployment
        if: steps.previous.outputs.previous_deployment != ''
        run: |
          echo "Rolling back to deployment: ${{ steps.previous.outputs.previous_deployment }}"

          # Note: Full rollback would require redeploying the previous template
          echo "Rollback initiated - manual intervention may be required"

      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ Deployment failed and has been rolled back to previous version.'
            });
        continue-on-error: true

  # Destroy infrastructure (manual trigger only)
  destroy:
    runs-on: ubuntu-latest
    needs: determine-environment
    if: github.event.inputs.destroy == 'true'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}-destroy
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Destroy infrastructure
        run: |
          echo "⚠️ Destroying infrastructure in ${{ needs.determine-environment.outputs.environment }}"

          az group delete \
            --name rg-numbatwallet-${{ needs.determine-environment.outputs.environment }} \
            --yes \
            --no-wait

          echo "### Infrastructure Destruction Initiated" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Resource Group: rg-numbatwallet-${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY