name: Bicep Infrastructure Validation

on:
  push:
    branches:
      - main
      - develop
      - 'feature/iac-*'
    paths:
      - 'infrastructure/bicep/**/*.bicep'
      - 'infrastructure/bicep/**/*.json'
      - '.github/workflows/bicep-validation.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/bicep/**/*.bicep'
      - 'infrastructure/bicep/**/*.json'
      - '.github/workflows/bicep-validation.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

env:
  BICEP_VERSION: '0.24.24'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  lint:
    name: Lint Bicep Templates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bicep
        uses: Azure/setup-bicep@v1
        with:
          version: ${{ env.BICEP_VERSION }}

      - name: Lint Bicep files
        run: |
          echo "üîç Linting Bicep templates..."
          LINT_ERRORS=0

          # Find all .bicep files and lint them
          for file in $(find infrastructure/bicep -name "*.bicep" -type f); do
            echo "Linting: $file"
            if ! bicep lint "$file"; then
              LINT_ERRORS=$((LINT_ERRORS + 1))
            fi
          done

          if [ $LINT_ERRORS -gt 0 ]; then
            echo "‚ùå Linting failed with $LINT_ERRORS errors"
            exit 1
          else
            echo "‚úÖ All Bicep files passed linting"
          fi

      - name: Build Bicep templates
        run: |
          echo "üî® Building Bicep templates..."
          BUILD_ERRORS=0

          # Build main.bicep
          if [ -f "infrastructure/bicep/main.bicep" ]; then
            echo "Building main.bicep..."
            if ! bicep build infrastructure/bicep/main.bicep --outfile infrastructure/bicep/main.json; then
              BUILD_ERRORS=$((BUILD_ERRORS + 1))
            fi
          fi

          # Build all module files
          for file in $(find infrastructure/bicep/modules -name "*.bicep" -type f); do
            echo "Building: $file"
            OUTPUT_FILE="${file%.bicep}.json"
            if ! bicep build "$file" --outfile "$OUTPUT_FILE"; then
              BUILD_ERRORS=$((BUILD_ERRORS + 1))
            fi
          done

          if [ $BUILD_ERRORS -gt 0 ]; then
            echo "‚ùå Build failed with $BUILD_ERRORS errors"
            exit 1
          else
            echo "‚úÖ All Bicep files built successfully"
          fi

      - name: Upload built ARM templates
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: arm-templates
          path: |
            infrastructure/bicep/**/*.json
            !infrastructure/bicep/parameters/*.json

  validate-dev:
    name: Validate Dev Environment
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.environment == 'dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Setup Bicep
        uses: Azure/setup-bicep@v1
        with:
          version: ${{ env.BICEP_VERSION }}

      - name: Validate Bicep deployment
        run: |
          echo "üîç Validating deployment for DEV environment..."

          # Set admin object ID (use service principal if available)
          ADMIN_OBJECT_ID="${{ secrets.ADMIN_OBJECT_ID_DEV }}"
          if [ -z "$ADMIN_OBJECT_ID" ]; then
            ADMIN_OBJECT_ID="00000000-0000-0000-0000-000000000000"
          fi

          az deployment sub validate \
            --location australiaeast \
            --template-file infrastructure/bicep/main.bicep \
            --parameters infrastructure/bicep/parameters/dev.parameters.json \
            --parameters administratorObjectId="$ADMIN_OBJECT_ID" \
            --parameters postgresAdminUsername="nwadmin" \
            --parameters postgresAdminPassword="ValidateOnly123!" \
            --name "validate-dev-${{ github.run_number }}"

          echo "‚úÖ DEV environment validation successful"

      - name: What-if deployment
        if: github.event_name == 'pull_request'
        run: |
          echo "üìã Running what-if analysis for DEV environment..."

          ADMIN_OBJECT_ID="${{ secrets.ADMIN_OBJECT_ID_DEV }}"
          if [ -z "$ADMIN_OBJECT_ID" ]; then
            ADMIN_OBJECT_ID="00000000-0000-0000-0000-000000000000"
          fi

          az deployment sub what-if \
            --location australiaeast \
            --template-file infrastructure/bicep/main.bicep \
            --parameters infrastructure/bicep/parameters/dev.parameters.json \
            --parameters administratorObjectId="$ADMIN_OBJECT_ID" \
            --parameters postgresAdminUsername="nwadmin" \
            --parameters postgresAdminPassword="ValidateOnly123!" \
            --name "whatif-dev-${{ github.run_number }}" \
            --no-pretty-print > whatif-output.txt

          # Post what-if results as PR comment (if in PR context)
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            echo "### üìã What-If Analysis Results (DEV)" > whatif-comment.md
            echo '```' >> whatif-comment.md
            tail -n 100 whatif-output.txt >> whatif-comment.md
            echo '```' >> whatif-comment.md
          fi

  validate-prod:
    name: Validate Prod Environment
    runs-on: ubuntu-latest
    needs: lint
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod' ||
      github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Setup Bicep
        uses: Azure/setup-bicep@v1
        with:
          version: ${{ env.BICEP_VERSION }}

      - name: Validate Bicep deployment
        run: |
          echo "üîç Validating deployment for PROD environment..."

          ADMIN_OBJECT_ID="${{ secrets.ADMIN_OBJECT_ID_PROD }}"
          if [ -z "$ADMIN_OBJECT_ID" ]; then
            ADMIN_OBJECT_ID="00000000-0000-0000-0000-000000000000"
          fi

          az deployment sub validate \
            --location australiaeast \
            --template-file infrastructure/bicep/main.bicep \
            --parameters infrastructure/bicep/parameters/prod.parameters.json \
            --parameters administratorObjectId="$ADMIN_OBJECT_ID" \
            --parameters postgresAdminUsername="nwadmin" \
            --parameters postgresAdminPassword="ValidateOnly123!" \
            --name "validate-prod-${{ github.run_number }}"

          echo "‚úÖ PROD environment validation successful"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/bicep
          framework: bicep
          output_format: sarif
          output_file_path: bicep-security.sarif
          quiet: false
          skip_check: CKV_AZURE_35,CKV_AZURE_113  # Skip specific checks if needed

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bicep-security.sarif

  cost-estimate:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: [validate-dev]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/setup-infracost-action@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate cost estimate
        run: |
          echo "üí∞ Generating cost estimate..."

          # Convert Bicep to ARM template
          bicep build infrastructure/bicep/main.bicep --outfile main.json

          # Generate cost breakdown
          infracost breakdown \
            --path main.json \
            --format json \
            --out-file /tmp/infracost.json

          # Generate cost diff for PR
          infracost diff \
            --path main.json \
            --format md \
            --out-file /tmp/infracost-diff.md

      - name: Post cost estimate to PR
        uses: infracost/infracost-gh-action@v1
        if: github.event_name == 'pull_request'
        with:
          path: /tmp/infracost.json
          show-skipped: false

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for required tags
        run: |
          echo "üè∑Ô∏è Checking for required tags..."
          REQUIRED_TAGS=("Application" "Environment" "Owner" "CostCenter")
          MISSING_TAGS=()

          for tag in "${REQUIRED_TAGS[@]}"; do
            if ! grep -r "\"$tag\":" infrastructure/bicep --include="*.bicep" > /dev/null; then
              MISSING_TAGS+=("$tag")
            fi
          done

          if [ ${#MISSING_TAGS[@]} -gt 0 ]; then
            echo "‚ùå Missing required tags: ${MISSING_TAGS[*]}"
            exit 1
          else
            echo "‚úÖ All required tags present"
          fi

      - name: Check encryption settings
        run: |
          echo "üîê Checking encryption settings..."

          # Check for encryption at rest
          if ! grep -r "requireInfrastructureEncryption: true" infrastructure/bicep/modules --include="*.bicep" > /dev/null; then
            echo "‚ö†Ô∏è Warning: Infrastructure encryption not enabled in all modules"
          fi

          # Check for TLS version
          if grep -r "TLS1_0\|TLS1_1" infrastructure/bicep/modules --include="*.bicep"; then
            echo "‚ùå Error: Insecure TLS versions found"
            exit 1
          fi

          echo "‚úÖ Encryption settings validated"

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [lint, validate-dev, security-scan, compliance-check]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## üìä Infrastructure Validation Summary"
          echo ""
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Bicep Linting | ${{ needs.lint.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
          echo "| Dev Validation | ${{ needs.validate-dev.result == 'success' && '‚úÖ Passed' || needs.validate-dev.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |"
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"
          echo "| Compliance Check | ${{ needs.compliance-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |"

          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ] || \
             [ "${{ needs.compliance-check.result }}" != "success" ]; then
            echo ""
            echo "‚ùå Validation failed. Please review the errors above."
            exit 1
          else
            echo ""
            echo "‚úÖ All validation checks passed successfully!"
          fi