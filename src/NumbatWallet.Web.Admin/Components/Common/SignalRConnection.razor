@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject ILogger<SignalRConnection> Logger
@implements IAsyncDisposable

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public EventCallback<string> OnWalletCreated { get; set; }
    [Parameter] public EventCallback<string> OnCredentialIssued { get; set; }
    [Parameter] public EventCallback<string> OnVerificationCompleted { get; set; }
    [Parameter] public EventCallback OnMetricsRefresh { get; set; }
    [Parameter] public EventCallback<SystemAlert> OnSystemAlert { get; set; }

    private HubConnection? _hubConnection;
    private bool _isConnected = false;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {
        try
        {
            // Build the hub connection
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hubs/dashboard"), options =>
                {
                    options.AccessTokenProvider = async () =>
                    {
                        // Get access token from cookie or session
                        var token = await JS.InvokeAsync<string>("localStorage.getItem", "access_token");
                        return token;
                    };
                })
                .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
                .Build();

            // Set up event handlers
            RegisterEventHandlers();

            // Handle reconnection events
            _hubConnection.Reconnecting += (error) =>
            {
                _isConnected = false;
                Logger.LogInformation("SignalR reconnecting: {Error}", error?.Message);
                _ = NotifyConnectionStatus("Reconnecting...", "warning");
                return Task.CompletedTask;
            };

            _hubConnection.Reconnected += (connectionId) =>
            {
                _isConnected = true;
                Logger.LogInformation("SignalR reconnected with ID: {ConnectionId}", connectionId);
                _ = NotifyConnectionStatus("Connected", "success");
                return Task.CompletedTask;
            };

            _hubConnection.Closed += async (error) =>
            {
                _isConnected = false;
                Logger.LogError(error, "SignalR connection closed");
                await NotifyConnectionStatus("Disconnected", "error");

                // Try to reconnect after 5 seconds
                await Task.Delay(5000);
                await StartConnection();
            };

            // Start the connection
            await StartConnection();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize SignalR connection");
        }
    }

    private void RegisterEventHandlers()
    {
        if (_hubConnection == null) return;

        // Wallet events
        _hubConnection.On<WalletInfo>("WalletCreated", async (walletInfo) =>
        {
            Logger.LogInformation("Wallet created: {WalletId}", walletInfo.WalletId);
            await InvokeAsync(async () =>
            {
                await OnWalletCreated.InvokeAsync(walletInfo.WalletId.ToString());
                await ShowNotification("New Wallet Created", $"Wallet {walletInfo.WalletId.ToString().Substring(0, 8)}... created", "info");
            });
        });

        // Credential events
        _hubConnection.On<CredentialInfo>("CredentialIssued", async (credentialInfo) =>
        {
            Logger.LogInformation("Credential issued: {CredentialId}", credentialInfo.CredentialId);
            await InvokeAsync(async () =>
            {
                await OnCredentialIssued.InvokeAsync(credentialInfo.CredentialId.ToString());
                await ShowNotification("Credential Issued", $"{credentialInfo.Type} credential issued", "success");
            });
        });

        // Verification events
        _hubConnection.On<VerificationInfo>("VerificationCompleted", async (verificationInfo) =>
        {
            Logger.LogInformation("Verification completed: {CredentialId}", verificationInfo.CredentialId);
            await InvokeAsync(async () =>
            {
                await OnVerificationCompleted.InvokeAsync(verificationInfo.CredentialId.ToString());
                await ShowNotification("Verification Complete", $"Credential verified by {verificationInfo.VerifierId}", "success");
            });
        });

        // Metrics refresh
        _hubConnection.On("RefreshMetrics", async () =>
        {
            Logger.LogInformation("Metrics refresh requested");
            await InvokeAsync(async () =>
            {
                await OnMetricsRefresh.InvokeAsync();
            });
        });

        // System alerts
        _hubConnection.On<SystemAlert>("SystemAlert", async (alert) =>
        {
            Logger.LogWarning("System alert: {Message} ({Severity})", alert.Message, alert.Severity);
            await InvokeAsync(async () =>
            {
                await OnSystemAlert.InvokeAsync(alert);
                await ShowNotification("System Alert", alert.Message, alert.Severity.ToLower());
            });
        });

        // Metrics updated
        _hubConnection.On<DashboardMetrics>("MetricsUpdated", async (metrics) =>
        {
            Logger.LogInformation("Metrics updated");
            await InvokeAsync(async () =>
            {
                // Update dashboard metrics
                await JS.InvokeVoidAsync("dashboardManager.updateMetrics", metrics);
            });
        });
    }

    private async Task StartConnection()
    {
        if (_hubConnection == null) return;

        try
        {
            await _hubConnection.StartAsync();
            _isConnected = true;
            Logger.LogInformation("SignalR connected successfully");
            await NotifyConnectionStatus("Connected", "success");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to start SignalR connection");
            await NotifyConnectionStatus("Connection failed", "error");
        }
    }

    public async Task RefreshMetrics()
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
        {
            await _hubConnection.InvokeAsync("RefreshMetrics");
        }
    }

    public async Task SubscribeToWallet(string walletId)
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
        {
            await _hubConnection.InvokeAsync("SubscribeToWallet", walletId);
        }
    }

    public async Task UnsubscribeFromWallet(string walletId)
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
        {
            await _hubConnection.InvokeAsync("UnsubscribeFromWallet", walletId);
        }
    }

    public async Task SubscribeToCredential(string credentialId)
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
        {
            await _hubConnection.InvokeAsync("SubscribeToCredential", credentialId);
        }
    }

    public async Task UnsubscribeFromCredential(string credentialId)
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
        {
            await _hubConnection.InvokeAsync("UnsubscribeFromCredential", credentialId);
        }
    }

    private async Task NotifyConnectionStatus(string message, string type)
    {
        await JS.InvokeVoidAsync("console.log", $"SignalR: {message}");

        // Show toast notification
        await JS.InvokeVoidAsync("eval", $@"
            if (window.showToast) {{
                window.showToast('{message}', '{type}');
            }}
        ");
    }

    private async Task ShowNotification(string title, string message, string type)
    {
        // Show browser notification if permitted
        await JS.InvokeVoidAsync("eval", $@"
            if ('Notification' in window && Notification.permission === 'granted') {{
                new Notification('{title}', {{
                    body: '{message}',
                    icon: '/favicon.ico',
                    badge: '/logo.png'
                }});
            }}

            // Also show toast
            if (window.showToast) {{
                window.showToast('{title}: {message}', '{type}');
            }}
        ");
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    // DTOs for SignalR messages
    private class WalletInfo
    {
        public Guid WalletId { get; set; }
        public string UserId { get; set; } = "";
        public string TenantId { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    private class CredentialInfo
    {
        public Guid CredentialId { get; set; }
        public Guid WalletId { get; set; }
        public string TenantId { get; set; } = "";
        public string Type { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    private class VerificationInfo
    {
        public Guid CredentialId { get; set; }
        public string VerifierId { get; set; } = "";
        public string TenantId { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    public class SystemAlert
    {
        public string Message { get; set; } = "";
        public string Severity { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    public class DashboardMetrics
    {
        public int ActiveWallets { get; set; }
        public int TotalCredentials { get; set; }
        public int VerificationsToday { get; set; }
        public int? ActiveTenants { get; set; }
    }
}

@if (_isConnected)
{
    @ChildContent
}
else
{
    <div class="connection-status">
        <div class="spinner"></div>
        Connecting to real-time updates...
    </div>
    @ChildContent
}

<style>
    .connection-status {
        position: fixed;
        top: 80px;
        right: 20px;
        background: var(--bg-card);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        padding: 0.75rem 1rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        z-index: 1000;
        animation: slideInRight 0.3s ease;
    }

    @@keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>