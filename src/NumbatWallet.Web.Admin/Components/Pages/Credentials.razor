@page "/credentials"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using NumbatWallet.Infrastructure.Data
@using NumbatWallet.Domain.Aggregates
@using NumbatWallet.SharedKernel.Enums
@using System.Text.Json
@inject NumbatWalletDbContext DbContext
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Credential Management - NumbatWallet</PageTitle>

<div class="page-container">
    <div class="page-header">
        <div class="page-header-left">
            <h1 class="page-title">Credential Management</h1>
            <nav class="breadcrumb">
                <a href="/">Home</a>
                <span>/</span>
                <span>Credentials</span>
            </nav>
        </div>
        <div class="page-header-right">
            <button class="btn btn-secondary" @onclick="ShowAnalytics">
                <i class="fas fa-chart-bar"></i> Analytics
            </button>
            <button class="btn btn-secondary" @onclick="ExportCredentials">
                <i class="fas fa-download"></i> Export
            </button>
            <button class="btn btn-primary" @onclick="ShowIssueModal">
                <i class="fas fa-plus"></i> Issue Credential
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-icon" style="background: rgba(79, 70, 229, 0.1); color: #4F46E5;">
                <i class="fas fa-certificate"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value">@TotalCredentials</div>
                <div class="stat-label">Total Credentials</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon" style="background: rgba(16, 185, 129, 0.1); color: #10B981;">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value">@ActiveCredentials</div>
                <div class="stat-label">Active</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon" style="background: rgba(239, 68, 68, 0.1); color: #EF4444;">
                <i class="fas fa-times-circle"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value">@ExpiredCredentials</div>
                <div class="stat-label">Expired</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon" style="background: rgba(59, 130, 246, 0.1); color: #3B82F6;">
                <i class="fas fa-eye"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value">@VerificationsToday</div>
                <div class="stat-label">Verifications Today</div>
            </div>
        </div>
    </div>

    <!-- Credential Type Tabs -->
    <div class="credential-tabs">
        <button class="tab-button @(ActiveTab == "all" ? "active" : "")" @onclick="@(() => SetActiveTab("all"))">
            All Types
        </button>
        <button class="tab-button @(ActiveTab == "DriversLicense" ? "active" : "")" @onclick="@(() => SetActiveTab("DriversLicense"))">
            <i class="fas fa-id-card"></i> Driver's License
        </button>
        <button class="tab-button @(ActiveTab == "Passport" ? "active" : "")" @onclick="@(() => SetActiveTab("Passport"))">
            <i class="fas fa-passport"></i> Passport
        </button>
        <button class="tab-button @(ActiveTab == "ProofOfAge" ? "active" : "")" @onclick="@(() => SetActiveTab("ProofOfAge"))">
            <i class="fas fa-calendar-check"></i> Proof of Age
        </button>
        <button class="tab-button @(ActiveTab == "StudentId" ? "active" : "")" @onclick="@(() => SetActiveTab("StudentId"))">
            <i class="fas fa-graduation-cap"></i> Student ID
        </button>
        <button class="tab-button @(ActiveTab == "EmployeeId" ? "active" : "")" @onclick="@(() => SetActiveTab("EmployeeId"))">
            <i class="fas fa-briefcase"></i> Employee ID
        </button>
    </div>

    <!-- Filters -->
    <div class="filter-bar">
        <div class="filter-group">
            <div class="search-input">
                <i class="fas fa-search"></i>
                <input type="text" placeholder="Search by ID, wallet, or issuer..." @bind="SearchQuery" @bind:event="oninput" @onkeyup="@(async (e) => { if (e.Key == "Enter") await LoadCredentials(); })" />
            </div>
        </div>
        <div class="filter-group">
            <select class="filter-select" value="@StatusFilter" @onchange="@(async (e) => { StatusFilter = e.Value?.ToString() ?? ""; await LoadCredentials(); })">
                <option value="">All Status</option>
                <option value="Active">Active</option>
                <option value="Suspended">Suspended</option>
                <option value="Revoked">Revoked</option>
                <option value="Expired">Expired</option>
            </select>
            <select class="filter-select" value="@IssuerFilter" @onchange="@(async (e) => { IssuerFilter = e.Value?.ToString() ?? ""; await LoadCredentials(); })">
                <option value="">All Issuers</option>
                @foreach (var issuer in Issuers)
                {
                    <option value="@issuer.Id">@issuer.Name</option>
                }
            </select>
            <input type="date" class="filter-input" value="@DateFilter" @onchange="@(async (e) => { DateFilter = DateTime.TryParse(e.Value?.ToString(), out var date) ? date : (DateTime?)null; await LoadCredentials(); })" />
        </div>
    </div>

    <!-- Credentials Grid View -->
    @if (ViewMode == "grid")
    {
        <div class="credentials-grid">
            @if (IsLoading)
            {
                <div class="loading-state">
                    <div class="spinner"></div>
                    Loading credentials...
                </div>
            }
            else if (!CredentialList.Any())
            {
                <div class="empty-state">
                    <i class="fas fa-certificate" style="font-size: 4rem; color: var(--text-tertiary);"></i>
                    <h3>No credentials found</h3>
                    <p>Try adjusting your filters or issue a new credential</p>
                </div>
            }
            else
            {
                @foreach (var credential in CredentialList)
                {
                    <div class="credential-card @(credential.IsSelected ? "selected" : "")" @onclick="() => SelectCredential(credential)">
                        <div class="credential-header">
                            <div class="credential-type-icon">
                                @GetCredentialIcon(credential.Type)
                            </div>
                            <div class="credential-actions">
                                <button class="btn-action" @onclick:stopPropagation="true" @onclick="() => ViewCredential(credential)">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn-action" @onclick:stopPropagation="true" @onclick="() => ShareCredential(credential)">
                                    <i class="fas fa-share"></i>
                                </button>
                            </div>
                        </div>
                        <div class="credential-body">
                            <h3 class="credential-type">@credential.Type</h3>
                            <div class="credential-id">@credential.Id.ToString().Substring(0, 8)...</div>
                            <div class="credential-info">
                                <div class="info-item">
                                    <span class="info-label">Wallet:</span>
                                    <span class="info-value">@credential.WalletId.Substring(0, 8)...</span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Issuer:</span>
                                    <span class="info-value">@credential.IssuerName</span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Issued:</span>
                                    <span class="info-value">@credential.IssuedAt.ToString("MMM dd, yyyy")</span>
                                </div>
                                @if (credential.ExpiresAt.HasValue)
                                {
                                    <div class="info-item">
                                        <span class="info-label">Expires:</span>
                                        <span class="info-value @(credential.IsExpired ? "text-danger" : "")">
                                            @credential.ExpiresAt.Value.ToString("MMM dd, yyyy")
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="credential-footer">
                            <span class="badge badge-@GetStatusClass(credential.Status)">
                                @credential.Status
                            </span>
                            @if (credential.VerificationCount > 0)
                            {
                                <span class="verification-count">
                                    <i class="fas fa-check-circle"></i> @credential.VerificationCount verifications
                                </span>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    }
    else
    {
        <!-- Table View -->
        <div class="table-container">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>
                            <input type="checkbox" @onchange="ToggleSelectAll" />
                        </th>
                        <th>Credential ID</th>
                        <th>Type</th>
                        <th>Wallet</th>
                        <th>Issuer</th>
                        <th>Status</th>
                        <th>Issued</th>
                        <th>Expires</th>
                        <th>Verifications</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var credential in CredentialList)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" checked="@credential.IsSelected" @onchange="() => ToggleSelection(credential)" />
                            </td>
                            <td>
                                <a href="/credentials/@credential.Id" class="link">
                                    @credential.Id.ToString().Substring(0, 8)...
                                </a>
                            </td>
                            <td>
                                <div class="type-cell">
                                    @GetCredentialIcon(credential.Type)
                                    @credential.Type
                                </div>
                            </td>
                            <td>@credential.WalletId.Substring(0, 8)...</td>
                            <td>@credential.IssuerName</td>
                            <td>
                                <span class="badge badge-@GetStatusClass(credential.Status)">
                                    @credential.Status
                                </span>
                            </td>
                            <td>@credential.IssuedAt.ToString("MMM dd, yyyy")</td>
                            <td>
                                @if (credential.ExpiresAt.HasValue)
                                {
                                    <span class="@(credential.IsExpired ? "text-danger" : "")">
                                        @credential.ExpiresAt.Value.ToString("MMM dd, yyyy")
                                    </span>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </td>
                            <td>@credential.VerificationCount</td>
                            <td>
                                <div class="action-buttons">
                                    <button class="btn-action" @onclick="() => ViewCredential(credential)" title="View">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn-action" @onclick="() => VerifyCredential(credential)" title="Verify">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn-action" @onclick="() => ShareCredential(credential)" title="Share">
                                        <i class="fas fa-share"></i>
                                    </button>
                                    @if (credential.Status == "Active")
                                    {
                                        <button class="btn-action warning" @onclick="() => SuspendCredential(credential)" title="Suspend">
                                            <i class="fas fa-pause"></i>
                                        </button>
                                    }
                                    <button class="btn-action danger" @onclick="() => RevokeCredential(credential)" title="Revoke">
                                        <i class="fas fa-ban"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <!-- View Mode Toggle -->
    <div class="view-toggle">
        <button class="view-btn @(ViewMode == "grid" ? "active" : "")" @onclick="@(() => SetViewMode("grid"))">
            <i class="fas fa-th"></i>
        </button>
        <button class="view-btn @(ViewMode == "list" ? "active" : "")" @onclick="@(() => SetViewMode("list"))">
            <i class="fas fa-list"></i>
        </button>
    </div>

    <!-- Pagination -->
    <div class="pagination">
        <div class="pagination-info">
            Showing @((CurrentPage - 1) * PageSize + 1) to @Math.Min(CurrentPage * PageSize, TotalRecords) of @TotalRecords credentials
        </div>
        <div class="pagination-controls">
            <button class="pagination-btn" @onclick="PreviousPage" disabled="@(CurrentPage == 1)">
                <i class="fas fa-chevron-left"></i>
            </button>
            @for (int i = Math.Max(1, CurrentPage - 2); i <= Math.Min(TotalPages, CurrentPage + 2); i++)
            {
                var pageNum = i;
                <button class="pagination-btn @(pageNum == CurrentPage ? "active" : "")" @onclick="() => GoToPage(pageNum)">
                    @pageNum
                </button>
            }
            <button class="pagination-btn" @onclick="NextPage" disabled="@(CurrentPage == TotalPages)">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

<!-- Issue Credential Modal -->
@if (ShowIssueModalFlag)
{
    <div class="modal-overlay" @onclick="CloseIssueModal">
        <div class="modal modal-large" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2 class="modal-title">Issue New Credential</h2>
                <button class="modal-close" @onclick="CloseIssueModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-row">
                    <div class="form-group">
                        <label>Credential Type *</label>
                        <select class="form-control" @bind="NewCredential.Type">
                            <option value="">Select Type</option>
                            <option value="DriversLicense">Driver's License</option>
                            <option value="Passport">Passport</option>
                            <option value="ProofOfAge">Proof of Age</option>
                            <option value="StudentId">Student ID</option>
                            <option value="EmployeeId">Employee ID</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Wallet *</label>
                        <input type="text" class="form-control" @bind="NewCredential.WalletId" placeholder="Wallet ID" />
                    </div>
                </div>

                <div class="form-group">
                    <label>Schema Version</label>
                    <input type="text" class="form-control" @bind="NewCredential.SchemaVersion" placeholder="e.g., schema:driverslicense:1.0" />
                </div>

                <div class="form-group">
                    <label>Credential Data (JSON)</label>
                    <textarea class="form-control" rows="8" @bind="NewCredential.Data" placeholder='{"fullName": "John Doe", "dateOfBirth": "1990-01-01"}'></textarea>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label>Valid From</label>
                        <input type="datetime-local" class="form-control" @bind="NewCredential.ValidFrom" />
                    </div>
                    <div class="form-group">
                        <label>Expires At</label>
                        <input type="datetime-local" class="form-control" @bind="NewCredential.ExpiresAt" />
                    </div>
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <input type="checkbox" @bind="NewCredential.AutoActivate" />
                        Auto-activate credential after issuance
                    </label>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseIssueModal">Cancel</button>
                <button class="btn btn-primary" @onclick="IssueCredential">
                    <i class="fas fa-plus"></i> Issue Credential
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<CredentialViewModel> CredentialList = new();
    private List<IssuerInfo> Issuers = new();
    private bool IsLoading = true;
    private string ViewMode = "grid";
    private string ActiveTab = "all";

    // Stats
    private int TotalCredentials = 0;
    private int ActiveCredentials = 0;
    private int ExpiredCredentials = 0;
    private int VerificationsToday = 0;

    // Filters
    private string SearchQuery = "";
    private string StatusFilter = "";
    private string IssuerFilter = "";
    private DateTime? DateFilter;

    // Pagination
    private int CurrentPage = 1;
    private int PageSize = 12;
    private int TotalRecords = 0;
    private int TotalPages => (int)Math.Ceiling(TotalRecords / (double)PageSize);

    // Issue Modal
    private bool ShowIssueModalFlag = false;
    private IssueCredentialModel NewCredential = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadIssuers();
        await LoadStats();
        await LoadCredentials();
    }

    private async Task LoadIssuers()
    {
        // Mock issuers for now
        Issuers = new List<IssuerInfo>
        {
            new() { Id = Guid.NewGuid().ToString(), Name = "Department of Transport" },
            new() { Id = Guid.NewGuid().ToString(), Name = "Department of Home Affairs" },
            new() { Id = Guid.NewGuid().ToString(), Name = "University of WA" },
            new() { Id = Guid.NewGuid().ToString(), Name = "ServiceWA" }
        };
    }

    private async Task LoadStats()
    {
        var now = DateTimeOffset.UtcNow;
        var today = now.Date;

        TotalCredentials = await DbContext.Credentials.CountAsync();
        ActiveCredentials = await DbContext.Credentials.CountAsync(c => c.Status == CredentialStatus.Active);
        ExpiredCredentials = await DbContext.Credentials.CountAsync(c => c.ExpiresAt != null && c.ExpiresAt < now);
        VerificationsToday = new Random().Next(50, 200); // Mock for now
    }

    private async Task LoadCredentials()
    {
        IsLoading = true;

        var query = DbContext.Credentials
            .Include(c => c.Wallet)
            .AsQueryable();

        // Apply tab filter
        if (ActiveTab != "all")
        {
            query = query.Where(c => c.CredentialType == ActiveTab);
        }

        // Apply search filter
        if (!string.IsNullOrEmpty(SearchQuery))
        {
            query = query.Where(c =>
                c.Id.ToString().Contains(SearchQuery) ||
                c.WalletId.ToString().Contains(SearchQuery) ||
                c.IssuerId.ToString().Contains(SearchQuery));
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(StatusFilter))
        {
            var status = Enum.Parse<CredentialStatus>(StatusFilter);
            query = query.Where(c => c.Status == status);
        }

        // Apply issuer filter
        if (!string.IsNullOrEmpty(IssuerFilter))
        {
            query = query.Where(c => c.IssuerId.ToString() == IssuerFilter);
        }

        // Apply date filter
        if (DateFilter.HasValue)
        {
            var date = DateFilter.Value.Date;
            query = query.Where(c => c.IssuedAt.Date == date);
        }

        // Get total count
        TotalRecords = await query.CountAsync();

        // Apply pagination
        var credentials = await query
            .OrderByDescending(c => c.IssuedAt)
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToListAsync();

        CredentialList = credentials.Select(c => new CredentialViewModel
        {
            Id = c.Id,
            Type = c.CredentialType,
            WalletId = c.WalletId.ToString(),
            IssuerId = c.IssuerId.ToString(),
            IssuerName = Issuers.FirstOrDefault(i => i.Id == c.IssuerId.ToString())?.Name ?? "Unknown",
            Status = c.Status.ToString(),
            IssuedAt = c.IssuedAt,
            ExpiresAt = c.ExpiresAt,
            IsExpired = c.ExpiresAt.HasValue && c.ExpiresAt < DateTimeOffset.UtcNow,
            VerificationCount = new Random().Next(0, 50), // Mock for now
            IsSelected = false
        }).ToList();

        IsLoading = false;
    }

    private void SetActiveTab(string tab)
    {
        ActiveTab = tab;
        CurrentPage = 1;
        _ = LoadCredentials();
    }

    private void SetViewMode(string mode)
    {
        ViewMode = mode;
    }

    private string GetCredentialIcon(string type) => type switch
    {
        "DriversLicense" => "🚗",
        "Passport" => "✈️",
        "ProofOfAge" => "🔞",
        "StudentId" => "🎓",
        "EmployeeId" => "💼",
        _ => "🎫"
    };

    private string GetStatusClass(string status) => status switch
    {
        "Active" => "success",
        "Suspended" => "warning",
        "Revoked" => "danger",
        "Expired" => "secondary",
        _ => "info"
    };

    private void SelectCredential(CredentialViewModel credential)
    {
        credential.IsSelected = !credential.IsSelected;
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        foreach (var credential in CredentialList)
        {
            credential.IsSelected = isChecked;
        }
    }

    private void ToggleSelection(CredentialViewModel credential)
    {
        credential.IsSelected = !credential.IsSelected;
    }

    private void ViewCredential(CredentialViewModel credential)
    {
        Navigation.NavigateTo($"/credentials/{credential.Id}");
    }

    private async Task VerifyCredential(CredentialViewModel credential)
    {
        // Implement verification logic
        await JS.InvokeVoidAsync("alert", $"Credential {credential.Id.ToString().Substring(0, 8)} verified successfully!");
    }

    private async Task ShareCredential(CredentialViewModel credential)
    {
        // Implement sharing logic
        Navigation.NavigateTo($"/credentials/{credential.Id}/share");
    }

    private async Task SuspendCredential(CredentialViewModel credential)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to suspend this credential?"))
        {
            var dbCredential = await DbContext.Credentials.FindAsync(credential.Id);
            if (dbCredential != null)
            {
                dbCredential.Suspend("Manual suspension via admin portal");
                await DbContext.SaveChangesAsync();
                await LoadCredentials();
            }
        }
    }

    private async Task RevokeCredential(CredentialViewModel credential)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to revoke this credential? This action cannot be undone."))
        {
            var dbCredential = await DbContext.Credentials.FindAsync(credential.Id);
            if (dbCredential != null)
            {
                dbCredential.Revoke("Manual revocation via admin portal");
                await DbContext.SaveChangesAsync();
                await LoadCredentials();
            }
        }
    }

    private void ShowIssueModal()
    {
        NewCredential = new IssueCredentialModel
        {
            ValidFrom = DateTime.Now,
            ExpiresAt = DateTime.Now.AddYears(1),
            AutoActivate = true
        };
        ShowIssueModalFlag = true;
    }

    private void CloseIssueModal()
    {
        ShowIssueModalFlag = false;
    }

    private async Task IssueCredential()
    {
        // Validate and issue credential
        if (string.IsNullOrEmpty(NewCredential.Type) || string.IsNullOrEmpty(NewCredential.WalletId))
        {
            await JS.InvokeVoidAsync("alert", "Please fill in all required fields");
            return;
        }

        // Parse wallet ID
        if (!Guid.TryParse(NewCredential.WalletId, out var walletId))
        {
            await JS.InvokeVoidAsync("alert", "Invalid wallet ID format");
            return;
        }

        // Create credential
        var credential = Credential.Create(
            walletId,
            Guid.NewGuid(), // Mock issuer ID
            NewCredential.Type,
            NewCredential.Data ?? "{}",
            NewCredential.SchemaVersion ?? $"schema:{NewCredential.Type.ToLower()}:1.0");

        if (credential.IsSuccess)
        {
            var cred = credential.Value;

            if (NewCredential.ExpiresAt.HasValue)
            {
                cred.SetExpiry(new DateTimeOffset(NewCredential.ExpiresAt.Value));
            }

            if (NewCredential.AutoActivate)
            {
                cred.Activate();
            }

            DbContext.Credentials.Add(cred);
            await DbContext.SaveChangesAsync();

            ShowIssueModalFlag = false;
            await LoadCredentials();
        }
    }

    private void ShowAnalytics()
    {
        Navigation.NavigateTo("/credentials/analytics");
    }

    private async Task ExportCredentials()
    {
        var csv = new System.Text.StringBuilder();
        csv.AppendLine("Credential ID,Type,Wallet,Issuer,Status,Issued,Expires,Verifications");

        foreach (var credential in CredentialList)
        {
            csv.AppendLine($"{credential.Id},{credential.Type},{credential.WalletId},{credential.IssuerName},{credential.Status},{credential.IssuedAt:yyyy-MM-dd},{credential.ExpiresAt?.ToString("yyyy-MM-dd") ?? "N/A"},{credential.VerificationCount}");
        }

        var bytes = System.Text.Encoding.UTF8.GetBytes(csv.ToString());
        var base64 = Convert.ToBase64String(bytes);

        await JS.InvokeVoidAsync("eval", $@"
            const link = document.createElement('a');
            link.href = 'data:text/csv;base64,{base64}';
            link.download = 'credentials-{DateTime.Now:yyyyMMdd-HHmmss}.csv';
            link.click();
        ");
    }

    private void GoToPage(int page)
    {
        CurrentPage = page;
        _ = LoadCredentials();
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            _ = LoadCredentials();
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            _ = LoadCredentials();
        }
    }

    // View Models
    private class CredentialViewModel
    {
        public Guid Id { get; set; }
        public string Type { get; set; } = "";
        public string WalletId { get; set; } = "";
        public string IssuerId { get; set; } = "";
        public string IssuerName { get; set; } = "";
        public string Status { get; set; } = "";
        public DateTimeOffset IssuedAt { get; set; }
        public DateTimeOffset? ExpiresAt { get; set; }
        public bool IsExpired { get; set; }
        public int VerificationCount { get; set; }
        public bool IsSelected { get; set; }
    }

    private class IssuerInfo
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
    }

    private class IssueCredentialModel
    {
        public string Type { get; set; } = "";
        public string WalletId { get; set; } = "";
        public string SchemaVersion { get; set; } = "";
        public string Data { get; set; } = "";
        public DateTime ValidFrom { get; set; }
        public DateTime? ExpiresAt { get; set; }
        public bool AutoActivate { get; set; }
    }
}