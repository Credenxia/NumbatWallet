<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NumbatWallet.Application</name>
    </assembly>
    <members>
        <member name="T:NumbatWallet.Application.CQRS.Dispatcher">
            <summary>
            Default implementation of the CQRS dispatcher
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.CQRS.Dispatcher.SendAsync``1(NumbatWallet.Application.CQRS.Interfaces.ICommand{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:NumbatWallet.Application.CQRS.Dispatcher.SendAsync(NumbatWallet.Application.CQRS.Interfaces.ICommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:NumbatWallet.Application.CQRS.Dispatcher.QueryAsync``1(NumbatWallet.Application.CQRS.Interfaces.IQuery{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:NumbatWallet.Application.CQRS.Interfaces.ICommand">
            <summary>
            Marker interface for commands that don't return a result
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.CQRS.Interfaces.ICommand`1">
            <summary>
            Marker interface for commands that return a result
            </summary>
            <typeparam name="TResult">The type of result returned by the command</typeparam>
        </member>
        <member name="T:NumbatWallet.Application.CQRS.Interfaces.ICommandHandler`1">
            <summary>
            Handler for commands that don't return a result
            </summary>
            <typeparam name="TCommand">The type of command to handle</typeparam>
        </member>
        <member name="M:NumbatWallet.Application.CQRS.Interfaces.ICommandHandler`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handles the command
            </summary>
            <param name="command">The command to handle</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="T:NumbatWallet.Application.CQRS.Interfaces.ICommandHandler`2">
            <summary>
            Handler for commands that return a result
            </summary>
            <typeparam name="TCommand">The type of command to handle</typeparam>
            <typeparam name="TResult">The type of result returned</typeparam>
        </member>
        <member name="M:NumbatWallet.Application.CQRS.Interfaces.ICommandHandler`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handles the command and returns a result
            </summary>
            <param name="command">The command to handle</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The command result</returns>
        </member>
        <member name="T:NumbatWallet.Application.CQRS.Interfaces.IDispatcher">
            <summary>
            Dispatcher for CQRS commands and queries
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.CQRS.Interfaces.IDispatcher.SendAsync``1(NumbatWallet.Application.CQRS.Interfaces.ICommand{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a command that returns a result
            </summary>
            <typeparam name="TResult">The type of result</typeparam>
            <param name="command">The command to send</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The command result</returns>
        </member>
        <member name="M:NumbatWallet.Application.CQRS.Interfaces.IDispatcher.SendAsync(NumbatWallet.Application.CQRS.Interfaces.ICommand,System.Threading.CancellationToken)">
            <summary>
            Sends a command that doesn't return a result
            </summary>
            <param name="command">The command to send</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:NumbatWallet.Application.CQRS.Interfaces.IDispatcher.QueryAsync``1(NumbatWallet.Application.CQRS.Interfaces.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Executes a query and returns a result
            </summary>
            <typeparam name="TResult">The type of result</typeparam>
            <param name="query">The query to execute</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The query result</returns>
        </member>
        <member name="T:NumbatWallet.Application.CQRS.Interfaces.IQuery`1">
            <summary>
            Marker interface for queries
            </summary>
            <typeparam name="TResult">The type of result returned by the query</typeparam>
        </member>
        <member name="T:NumbatWallet.Application.CQRS.Interfaces.IQueryHandler`2">
            <summary>
            Handler for queries
            </summary>
            <typeparam name="TQuery">The type of query to handle</typeparam>
            <typeparam name="TResult">The type of result returned</typeparam>
        </member>
        <member name="M:NumbatWallet.Application.CQRS.Interfaces.IQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handles the query and returns a result
            </summary>
            <param name="query">The query to handle</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The query result</returns>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.IAuditService">
            <summary>
            Service for logging and managing audit trails for data access
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IAuditService.LogAccessAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Logs an audit entry for data access
            </summary>
            <param name="auditEntry">The audit entry to log</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IAuditService.LogUnmaskOperationAsync(System.String,System.String,System.String,NumbatWallet.SharedKernel.Enums.DataClassification,System.String,System.String,System.Int32)">
            <summary>
            Logs a sensitive data unmask operation
            </summary>
            <param name="entityType">The entity type</param>
            <param name="entityId">The entity ID</param>
            <param name="fieldName">The field that was unmasked</param>
            <param name="classification">The data classification</param>
            <param name="reason">The reason for unmasking</param>
            <param name="userId">The user who performed the unmask</param>
            <param name="duration">The unmask duration in seconds</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IAuditService.GetAuditLogsAsync(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets audit logs for an entity
            </summary>
            <param name="entityType">The entity type</param>
            <param name="entityId">The entity ID</param>
            <param name="startDate">Optional start date filter</param>
            <param name="endDate">Optional end date filter</param>
            <returns>List of audit entries</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IAuditService.GetUnmaskAuditLogsAsync(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets unmask audit logs for a user
            </summary>
            <param name="userId">The user ID</param>
            <param name="startDate">Optional start date filter</param>
            <param name="endDate">Optional end date filter</param>
            <returns>List of unmask audit entries</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IAuditService.GetAccessStatisticsAsync(System.Guid,NumbatWallet.Application.Interfaces.TimePeriod)">
            <summary>
            Gets statistics on sensitive data access
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="period">The time period for statistics</param>
            <returns>Access statistics</returns>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.AuditLogEntry">
            <summary>
            Represents an audit log entry
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.UnmaskAuditEntry">
            <summary>
            Represents an unmask operation audit entry
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.SensitiveDataAccessStats">
            <summary>
            Statistics for sensitive data access
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.TimePeriod">
            <summary>
            Time period for statistics
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.IEncryptionService">
            <summary>
            Service for encryption operations using envelope encryption (DEK/KEK pattern)
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IEncryptionService.EncryptAsync(System.Byte[],System.String)">
            <summary>
            Encrypts data using the current key for the tenant
            </summary>
            <param name="plaintext">The data to encrypt</param>
            <param name="keyId">The key ID to use for encryption</param>
            <returns>The encrypted data</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IEncryptionService.DecryptAsync(System.Byte[],System.String)">
            <summary>
            Decrypts data using the specified key
            </summary>
            <param name="ciphertext">The encrypted data</param>
            <param name="keyId">The key ID used for encryption</param>
            <returns>The decrypted data</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IEncryptionService.GetCurrentKeyIdAsync(System.String)">
            <summary>
            Gets the current encryption key ID for the tenant
            </summary>
            <param name="tenantId">The tenant ID</param>
            <returns>The current key ID</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IEncryptionService.GenerateHmacAsync(System.String,System.String)">
            <summary>
            Generates an HMAC token for searchable encryption
            </summary>
            <param name="data">The data to generate HMAC for</param>
            <param name="context">Additional context for the HMAC (e.g., field name)</param>
            <returns>The HMAC token</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IEncryptionService.RotateKeysAsync(System.String,System.Boolean)">
            <summary>
            Rotates encryption keys for a tenant
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="reEncryptData">Whether to re-encrypt existing data</param>
            <returns>The new key ID</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IEncryptionService.IsKeyValidAsync(System.String)">
            <summary>
            Checks if a key is valid and not expired
            </summary>
            <param name="keyId">The key ID to check</param>
            <returns>True if the key is valid</returns>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.IHmacSearchTokenService">
            <summary>
            Service for generating privacy-preserving search tokens using HMAC for PII data
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IHmacSearchTokenService.GenerateNameTokensAsync(System.String)">
            <summary>
            Generates search tokens for a person's full name using various strategies
            </summary>
            <param name="fullName">The full name to tokenize</param>
            <returns>List of HMAC tokens for searching</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IHmacSearchTokenService.GenerateNameSearchTokensAsync(System.String)">
            <summary>
            Generates search tokens for a search term (used when searching)
            </summary>
            <param name="searchTerm">The search term entered by user</param>
            <returns>List of tokens to match against index</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IHmacSearchTokenService.GenerateEmailTokenAsync(System.String)">
            <summary>
            Generates a search token for an email address
            </summary>
            <param name="email">The email address to tokenize</param>
            <returns>HMAC token for the normalized email</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IHmacSearchTokenService.GenerateDateTokenAsync(System.DateTime,NumbatWallet.Application.Interfaces.DateGranularity)">
            <summary>
            Generates a search token for a date with specified granularity
            </summary>
            <param name="dateTime">The date to tokenize</param>
            <param name="granularity">The level of date precision</param>
            <returns>HMAC token for the date</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IHmacSearchTokenService.GenerateBulkTokensAsync(System.Collections.Generic.IEnumerable{NumbatWallet.Application.Interfaces.PersonSearchData})">
            <summary>
            Generates tokens for multiple persons in a batch operation
            </summary>
            <param name="persons">Collection of person data to tokenize</param>
            <returns>Dictionary mapping person ID to their tokens</returns>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.DateGranularity">
            <summary>
            Defines the granularity level for date tokenization
            </summary>
        </member>
        <member name="F:NumbatWallet.Application.Interfaces.DateGranularity.Year">
            <summary>
            Year only (for age range searches)
            </summary>
        </member>
        <member name="F:NumbatWallet.Application.Interfaces.DateGranularity.YearMonth">
            <summary>
            Year and month (for more precise matching)
            </summary>
        </member>
        <member name="F:NumbatWallet.Application.Interfaces.DateGranularity.FullDate">
            <summary>
            Full date (for exact DOB matching)
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.PersonSearchData">
            <summary>
            Data structure for batch tokenization of person search data
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.PersonSearchData.Id">
            <summary>
            Unique identifier for the person
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.PersonSearchData.FullName">
            <summary>
            Person's full name
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.PersonSearchData.Email">
            <summary>
            Person's email address
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.PersonSearchData.DateOfBirth">
            <summary>
            Person's date of birth
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.IProtectionService">
            <summary>
            Service for applying data protection based on tenant policies.
            Handles encryption, tokenization, and redaction transparently.
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IProtectionService.ProtectAsync``1(``0,NumbatWallet.SharedKernel.Enums.DataClassification,System.String,System.String)">
            <summary>
            Protects a field value based on its classification and tenant policy
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="value">The value to protect</param>
            <param name="classification">The data classification level</param>
            <param name="fieldName">The name of the field</param>
            <param name="entityType">The type of entity containing the field</param>
            <returns>A protected representation of the value</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IProtectionService.UnprotectAsync``1(NumbatWallet.Application.Interfaces.ProtectedValue{``0},System.String)">
            <summary>
            Unprotects a field value (decrypts if encrypted)
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="protectedValue">The protected value</param>
            <param name="reason">The reason for accessing the unprotected value</param>
            <returns>The unprotected value</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IProtectionService.GenerateSearchTokensAsync(System.String,System.String,NumbatWallet.SharedKernel.Enums.SearchStrategy)">
            <summary>
            Generates search tokens for a field value
            </summary>
            <param name="value">The value to tokenize</param>
            <param name="fieldName">The name of the field</param>
            <param name="strategy">The search strategy to use</param>
            <returns>Array of search tokens</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IProtectionService.GetRedactedValue(System.String,NumbatWallet.SharedKernel.Enums.RedactionPattern)">
            <summary>
            Gets the redacted display value for a field
            </summary>
            <param name="value">The original value</param>
            <param name="pattern">The redaction pattern to apply</param>
            <returns>The redacted display value</returns>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.ProtectedValue`1">
            <summary>
            Represents a protected value that may be encrypted, tokenized, or plaintext
            based on tenant policy
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.ProtectedValue`1.PlainValue">
            <summary>
            The plaintext value (null if encrypted)
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.ProtectedValue`1.EncryptedValue">
            <summary>
            The encrypted value (null if not encrypted)
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.ProtectedValue`1.RedactedDisplay">
            <summary>
            The redacted display value (always present for sensitive data)
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.ProtectedValue`1.SearchTokens">
            <summary>
            Search tokens for the value
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.ProtectedValue`1.Classification">
            <summary>
            The data classification level
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.ProtectedValue`1.IsEncrypted">
            <summary>
            Whether the value is currently encrypted
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.EncryptedData">
            <summary>
            Represents encrypted data with metadata
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.EncryptedData.CipherText">
            <summary>
            The encrypted bytes
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.EncryptedData.KeyId">
            <summary>
            The ID of the key used for encryption
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.EncryptedData.Algorithm">
            <summary>
            The encryption algorithm used
            </summary>
        </member>
        <member name="P:NumbatWallet.Application.Interfaces.EncryptedData.EncryptedAt">
            <summary>
            When the data was encrypted
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.IRedactionService">
            <summary>
            Service for redacting sensitive information based on PII type
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IRedactionService.RedactAsync(System.String,NumbatWallet.SharedKernel.Enums.PiiType,NumbatWallet.SharedKernel.Enums.RedactionPattern,System.Threading.CancellationToken)">
            <summary>
            Redacts a value based on its PII type and pattern
            </summary>
            <param name="value">The value to redact</param>
            <param name="piiType">The PII type</param>
            <param name="pattern">The redaction pattern to use</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The redacted value</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IRedactionService.RedactBulkAsync(System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.String,NumbatWallet.SharedKernel.Enums.PiiType,NumbatWallet.SharedKernel.Enums.RedactionPattern}},System.Threading.CancellationToken)">
            <summary>
            Redacts multiple values in bulk
            </summary>
            <param name="values">Dictionary of values to redact with their PII types</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Dictionary of redacted values</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IRedactionService.GetDefaultPattern(NumbatWallet.SharedKernel.Enums.PiiType)">
            <summary>
            Gets the default redaction pattern for a PII type
            </summary>
            <param name="piiType">The PII type</param>
            <returns>The default redaction pattern</returns>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.ISearchIndexingService">
            <summary>
            Service for managing search indexes for protected fields.
            Works independently of encryption status.
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchIndexingService.GenerateIndexEntriesAsync``1(``0)">
            <summary>
            Generates search index entries for an entity
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <param name="entity">The entity to index</param>
            <returns>Array of search index entries</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchIndexingService.UpdateIndexAsync``1(``0)">
            <summary>
            Updates search indexes for an entity
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <param name="entity">The entity to update indexes for</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchIndexingService.SearchAsync(System.String,System.String,System.String,NumbatWallet.Application.Interfaces.SearchOptions)">
            <summary>
            Searches for entities using tokenized search
            </summary>
            <param name="searchTerm">The search term</param>
            <param name="entityType">The type of entity to search</param>
            <param name="fieldName">The field to search in</param>
            <param name="options">Search options</param>
            <returns>List of matching entity IDs</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchIndexingService.RemoveIndexAsync(System.Guid,System.String)">
            <summary>
            Removes search indexes for an entity
            </summary>
            <param name="entityId">The ID of the entity</param>
            <param name="entityType">The type of entity</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchIndexingService.RebuildIndexesAsync(System.Guid)">
            <summary>
            Rebuilds all search indexes for a tenant
            </summary>
            <param name="tenantId">The tenant ID</param>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.SearchIndexEntry">
            <summary>
            Represents a search index entry
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.SearchOptions">
            <summary>
            Options for search operations
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.ISearchTokenService">
            <summary>
            Service for generating search tokens for protected fields.
            Uses HMAC to create searchable tokens that work regardless of encryption status.
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchTokenService.GenerateTokensAsync(System.String,NumbatWallet.SharedKernel.Enums.SearchStrategy,System.String,System.String)">
            <summary>
            Generates search tokens based on the specified strategy
            </summary>
            <param name="value">The value to tokenize</param>
            <param name="strategy">The search strategy to use</param>
            <param name="entityType">The entity type for context</param>
            <param name="fieldName">The field name for context</param>
            <returns>Collection of search tokens</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchTokenService.GenerateExactTokenAsync(System.String,System.String,System.String)">
            <summary>
            Generates a single exact match token
            </summary>
            <param name="value">The value to tokenize</param>
            <param name="entityType">The entity type for context</param>
            <param name="fieldName">The field name for context</param>
            <returns>The search token</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchTokenService.GeneratePrefixTokensAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Generates prefix tokens for partial matching
            </summary>
            <param name="value">The value to tokenize</param>
            <param name="minLength">Minimum prefix length</param>
            <param name="maxLength">Maximum prefix length</param>
            <returns>Collection of prefix tokens</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchTokenService.GeneratePhoneticTokensAsync(System.String)">
            <summary>
            Generates phonetic tokens for fuzzy matching
            </summary>
            <param name="value">The value to tokenize</param>
            <returns>Collection of phonetic tokens</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchTokenService.ValidateTokenAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Validates that a search token matches a value
            </summary>
            <param name="value">The original value</param>
            <param name="token">The search token</param>
            <param name="entityType">The entity type for context</param>
            <param name="fieldName">The field name for context</param>
            <returns>True if the token matches the value</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchTokenService.GetFieldStrategyAsync(System.String,System.String)">
            <summary>
            Gets the search strategy for a field based on its configuration
            </summary>
            <param name="entityType">The entity type</param>
            <param name="fieldName">The field name</param>
            <returns>The configured search strategy</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ISearchTokenService.BulkGenerateTokensAsync(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Bulk generates tokens for multiple values
            </summary>
            <param name="values">Dictionary of field names to values</param>
            <param name="entityType">The entity type</param>
            <returns>Dictionary of field names to token collections</returns>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.ITelemetryService">
            <summary>
            Service for telemetry logging with automatic PII redaction
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITelemetryService.LogEventAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Logs a custom event with automatic PII redaction
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="properties">Event properties (will be scanned for PII)</param>
            <param name="metrics">Event metrics</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITelemetryService.LogSecurityEventAsync(System.String,System.String,System.Object)">
            <summary>
            Logs a security event with enhanced tracking
            </summary>
            <param name="eventType">Type of security event</param>
            <param name="severity">Severity level (Low, Medium, High, Critical)</param>
            <param name="details">Event details (will be redacted)</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITelemetryService.LogExceptionAsync(System.Exception,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Logs an exception with automatic PII redaction from message and stack trace
            </summary>
            <param name="exception">The exception to log</param>
            <param name="properties">Additional context properties</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITelemetryService.LogMetricAsync(System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Logs a metric value
            </summary>
            <param name="metricName">Name of the metric</param>
            <param name="value">Metric value</param>
            <param name="properties">Additional properties</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITelemetryService.LogDependencyAsync(System.String,System.String,System.String,System.DateTimeOffset,System.TimeSpan,System.Boolean)">
            <summary>
            Logs a dependency call with automatic PII redaction
            </summary>
            <param name="dependencyType">Type of dependency (HTTP, SQL, etc.)</param>
            <param name="dependencyName">Name of the dependency</param>
            <param name="data">Call data (will be redacted)</param>
            <param name="startTime">Start time of the call</param>
            <param name="duration">Duration of the call</param>
            <param name="success">Whether the call succeeded</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITelemetryService.LogPageViewAsync(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Logs a page view event
            </summary>
            <param name="pageName">Name of the page</param>
            <param name="url">Page URL (will be redacted)</param>
            <param name="duration">Time spent on page</param>
            <param name="properties">Additional properties</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITelemetryService.LogRequestAsync(System.String,System.DateTimeOffset,System.TimeSpan,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Logs a request (API call)
            </summary>
            <param name="requestName">Name of the request</param>
            <param name="startTime">Start time</param>
            <param name="duration">Duration</param>
            <param name="responseCode">HTTP response code</param>
            <param name="success">Whether successful</param>
            <param name="properties">Additional properties</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITelemetryService.LogTraceAsync(System.String,NumbatWallet.Application.Interfaces.TelemetrySeverityLevel,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Logs a trace message
            </summary>
            <param name="message">Trace message (will be redacted)</param>
            <param name="severityLevel">Severity level</param>
            <param name="properties">Additional properties</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITelemetryService.LogAvailabilityAsync(System.String,System.DateTimeOffset,System.TimeSpan,System.String,System.Boolean,System.String)">
            <summary>
            Logs an availability test result
            </summary>
            <param name="testName">Name of the test</param>
            <param name="startTime">Start time</param>
            <param name="duration">Duration</param>
            <param name="runLocation">Test run location</param>
            <param name="success">Whether successful</param>
            <param name="message">Optional message</param>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.TelemetrySeverityLevel">
            <summary>
            Severity level for telemetry traces
            </summary>
        </member>
        <member name="F:NumbatWallet.Application.Interfaces.TelemetrySeverityLevel.Verbose">
            <summary>
            Verbose level
            </summary>
        </member>
        <member name="F:NumbatWallet.Application.Interfaces.TelemetrySeverityLevel.Information">
            <summary>
            Information level
            </summary>
        </member>
        <member name="F:NumbatWallet.Application.Interfaces.TelemetrySeverityLevel.Warning">
            <summary>
            Warning level
            </summary>
        </member>
        <member name="F:NumbatWallet.Application.Interfaces.TelemetrySeverityLevel.Error">
            <summary>
            Error level
            </summary>
        </member>
        <member name="F:NumbatWallet.Application.Interfaces.TelemetrySeverityLevel.Critical">
            <summary>
            Critical level
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.ITenantPolicyService">
            <summary>
            Service for managing tenant-specific security and retention policies
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITenantPolicyService.GetCurrentPolicyAsync">
            <summary>
            Gets the current tenant's security policy
            </summary>
            <returns>The tenant security policy</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITenantPolicyService.GetTenantPolicyAsync(System.Guid)">
            <summary>
            Gets a specific tenant's security policy
            </summary>
            <param name="tenantId">The tenant ID</param>
            <returns>The tenant security policy</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITenantPolicyService.GetFieldPolicyAsync(System.Guid,System.String,System.String)">
            <summary>
            Gets the field protection rule for a specific field
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="entityType">The entity type</param>
            <param name="fieldName">The field name</param>
            <returns>The field protection rule</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITenantPolicyService.UpdatePolicyAsync(NumbatWallet.Application.Interfaces.TenantSecurityPolicy)">
            <summary>
            Updates a tenant's security policy
            </summary>
            <param name="policy">The updated policy</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITenantPolicyService.RequiresEncryptionAsync(System.Guid,System.String,System.String)">
            <summary>
            Checks if a field requires encryption for a tenant
            </summary>
            <param name="tenantId">The tenant ID</param>
            <param name="entityType">The entity type</param>
            <param name="fieldName">The field name</param>
            <returns>True if encryption is required</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.ITenantPolicyService.GetRetentionPolicyAsync(System.Guid)">
            <summary>
            Gets the retention policy for a tenant
            </summary>
            <param name="tenantId">The tenant ID</param>
            <returns>The retention policy</returns>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.TenantSecurityPolicy">
            <summary>
            Tenant-specific security policy configuration
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.TenantSecurityPolicy.GetFieldPolicy(System.String,System.String)">
            <summary>
            Gets the protection rule for a specific field
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.FieldProtectionRule">
            <summary>
            Protection rule for a specific field
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.UnmaskingPolicy">
            <summary>
            Policy for unmask operations
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.RetentionPolicy">
            <summary>
            Retention policy configuration
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.RetentionRule">
            <summary>
            Retention rule for specific data classification
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.IUnmaskCacheService">
            <summary>
            Service for managing time-limited unmask sessions.
            Provides temporary access to unredacted values.
            </summary>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IUnmaskCacheService.CreateSessionAsync(System.String,System.String[],System.String[],System.String,System.Int32)">
            <summary>
            Creates a new unmask session for a user
            </summary>
            <param name="userId">The user requesting unmask access</param>
            <param name="entityIds">The entity IDs to unmask</param>
            <param name="fields">The fields to unmask</param>
            <param name="reason">The reason for unmasking (required for sensitive data)</param>
            <param name="ttlSeconds">Time to live in seconds</param>
            <returns>The created unmask session</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IUnmaskCacheService.GetUnmaskedValueAsync``1(System.String,System.String,System.String)">
            <summary>
            Gets an unmasked value from a session
            </summary>
            <typeparam name="T">The type of value</typeparam>
            <param name="sessionId">The unmask session ID</param>
            <param name="entityId">The entity ID</param>
            <param name="fieldName">The field name</param>
            <returns>The unmasked value, or null if not in session</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IUnmaskCacheService.GetActiveSessionAsync(System.String)">
            <summary>
            Gets an active session for a user
            </summary>
            <param name="userId">The user ID</param>
            <returns>The active session, or null if none exists</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IUnmaskCacheService.ValidateTokenAsync(System.String)">
            <summary>
            Validates an unmask token
            </summary>
            <param name="token">The unmask token</param>
            <returns>The session if valid, null otherwise</returns>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IUnmaskCacheService.RevokeSessionAsync(System.String)">
            <summary>
            Revokes an unmask session
            </summary>
            <param name="sessionId">The session ID to revoke</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IUnmaskCacheService.RevokeAllSessionsForUserAsync(System.String)">
            <summary>
            Revokes all sessions for a user
            </summary>
            <param name="userId">The user ID</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IUnmaskCacheService.ExtendSessionAsync(System.String,System.Int32)">
            <summary>
            Extends a session's TTL
            </summary>
            <param name="sessionId">The session ID</param>
            <param name="additionalSeconds">Additional seconds to add</param>
        </member>
        <member name="M:NumbatWallet.Application.Interfaces.IUnmaskCacheService.GetSessionStatsAsync(System.String)">
            <summary>
            Gets session statistics for monitoring
            </summary>
            <param name="userId">Optional user ID filter</param>
            <returns>Session statistics</returns>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.UnmaskSession">
            <summary>
            Represents an unmask session
            </summary>
        </member>
        <member name="T:NumbatWallet.Application.Interfaces.UnmaskSessionStats">
            <summary>
            Statistics for unmask sessions
            </summary>
        </member>
    </members>
</doc>
