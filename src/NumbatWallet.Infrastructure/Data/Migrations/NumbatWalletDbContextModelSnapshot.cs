// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NumbatWallet.Infrastructure.Data;

#nullable disable

namespace NumbatWallet.Infrastructure.Data.Migrations
{
    [DbContext(typeof(NumbatWalletDbContext))]
    partial class NumbatWalletDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("created_by");

                    b.Property<string>("CredentialData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("credential_data");

                    b.Property<string>("CredentialId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("credential_id");

                    b.Property<string>("CredentialType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("credential_type");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid")
                        .HasColumnName("issuer_id");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("modified_by");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("revocation_reason");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("SchemaId")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("schema_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("SuspensionReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("suspension_reason");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_credentials");

                    b.HasIndex("IssuerId")
                        .HasDatabaseName("ix_credentials_issuer_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_credentials_status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_credentials_tenant_id");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("ix_credentials_wallet_id");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("ix_credentials_tenant_id_status");

                    b.HasIndex("TenantId", "WalletId")
                        .HasDatabaseName("ix_credentials_tenant_id_wallet_id");

                    b.ToTable("Credentials", (string)null);
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.Issuer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CertificateExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("certificate_expires_at");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("created_by");

                    b.Property<string>("DeactivationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("deactivation_reason");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("endpoint");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsTrusted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_trusted");

                    b.Property<string>("IssuerDid")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("issuer_did");

                    b.Property<string>("Jurisdiction")
                        .HasColumnType("text")
                        .HasColumnName("jurisdiction");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("public_key");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<int>("TrustLevel")
                        .HasColumnType("integer")
                        .HasColumnName("trust_level");

                    b.Property<string>("TrustedDomain")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("trusted_domain");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text")
                        .HasColumnName("website_url");

                    b.HasKey("Id")
                        .HasName("pk_issuers");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_issuers_code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_issuers_is_active");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_issuers_tenant_id");

                    b.HasIndex("TrustedDomain")
                        .IsUnique()
                        .HasDatabaseName("ix_issuers_trusted_domain");

                    b.HasIndex("TenantId", "IsActive")
                        .HasDatabaseName("ix_issuers_tenant_id_is_active");

                    b.ToTable("Issuers", (string)null);
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("created_by");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("date_of_birth");

                    b.Property<int>("EmailVerificationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("email_verification_status");

                    b.Property<DateTimeOffset?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_verified_at");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("last_name");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text")
                        .HasColumnName("mobile_number");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("modified_by");

                    b.Property<int>("PhoneVerificationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("phone_verification_status");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<string>("VerificationLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("verification_level");

                    b.Property<DateTimeOffset?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.HasKey("Id")
                        .HasName("pk_persons");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_persons_tenant_id");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.RevocationRegistry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CredentialType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("credential_type");

                    b.Property<int>("CurrentCredentials")
                        .HasColumnType("integer")
                        .HasColumnName("current_credentials");

                    b.Property<DateTimeOffset?>("FullAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("full_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid")
                        .HasColumnName("issuer_id");

                    b.Property<int>("MaxCredentials")
                        .HasColumnType("integer")
                        .HasColumnName("max_credentials");

                    b.Property<string>("RegistryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("registry_id");

                    b.HasKey("Id")
                        .HasName("pk_revocation_registry");

                    b.HasIndex("IssuerId")
                        .HasDatabaseName("ix_revocation_registry_issuer_id");

                    b.ToTable("revocation_registry", (string)null);
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.SupportedCredentialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid")
                        .HasColumnName("issuer_id");

                    b.Property<string>("SchemaId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schema_id");

                    b.Property<string>("SchemaVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schema_version");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("pk_supported_credential_type");

                    b.HasIndex("IssuerId")
                        .HasDatabaseName("ix_supported_credential_type_issuer_id");

                    b.ToTable("supported_credential_type", (string)null);
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<string>("LockReason")
                        .HasColumnType("text")
                        .HasColumnName("lock_reason");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("SuspensionReason")
                        .HasColumnType("text")
                        .HasColumnName("suspension_reason");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<string>("WalletDid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("wallet_did");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("wallet_name");

                    b.HasKey("Id")
                        .HasName("pk_wallets");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_wallets_person_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_wallets_status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_wallets_tenant_id");

                    b.HasIndex("TenantId", "PersonId")
                        .HasDatabaseName("ix_wallets_tenant_id_person_id");

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.Credential", b =>
                {
                    b.HasOne("NumbatWallet.Domain.Aggregates.Issuer", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_credentials_issuers_issuer_id");

                    b.HasOne("NumbatWallet.Domain.Aggregates.Wallet", "Wallet")
                        .WithMany("Credentials")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_credentials_wallets_wallet_id");

                    b.Navigation("Issuer");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.Person", b =>
                {
                    b.OwnsOne("NumbatWallet.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("Email");

                            b1.HasKey("PersonId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("ix_persons_email");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId")
                                .HasConstraintName("fk_persons_persons_id");
                        });

                    b.OwnsOne("NumbatWallet.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)")
                                .HasColumnName("PhoneNumberCountryCode");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("PhoneNumberValue");

                            b1.HasKey("PersonId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("ix_persons_phone_number_value");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId")
                                .HasConstraintName("fk_persons_persons_id");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.RevocationRegistry", b =>
                {
                    b.HasOne("NumbatWallet.Domain.Aggregates.Issuer", null)
                        .WithMany("RevocationRegistries")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_revocation_registry_issuers_issuer_id");
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.SupportedCredentialType", b =>
                {
                    b.HasOne("NumbatWallet.Domain.Aggregates.Issuer", null)
                        .WithMany("SupportedCredentialTypes")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_supported_credential_type_issuers_issuer_id");
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.Wallet", b =>
                {
                    b.HasOne("NumbatWallet.Domain.Aggregates.Person", null)
                        .WithMany("Wallets")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wallets_persons_person_id");
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.Issuer", b =>
                {
                    b.Navigation("RevocationRegistries");

                    b.Navigation("SupportedCredentialTypes");
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.Person", b =>
                {
                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("NumbatWallet.Domain.Aggregates.Wallet", b =>
                {
                    b.Navigation("Credentials");
                });
#pragma warning restore 612, 618
        }
    }
}
